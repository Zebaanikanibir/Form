{"ast":null,"code":"import _objectSpread from\"E:/form-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"E:/form-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _objectWithoutProperties from\"E:/form-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";var _excluded=[\"children\"];import React,{useContext}from'react';import{Redirect,Route}from'react-router-dom';import{UserContext}from'../../App';import jwt_decode from\"jwt-decode\";import{jsx as _jsx}from\"react/jsx-runtime\";var PrivateRoute=function PrivateRoute(_ref){var children=_ref.children,rest=_objectWithoutProperties(_ref,_excluded);var _useContext=useContext(UserContext),_useContext2=_slicedToArray(_useContext,2),loggedInUser=_useContext2[0],setLoggedInUser=_useContext2[1];var isLoggedIn=function isLoggedIn(){var token=sessionStorage.getItem('token');if(!token){return false;}var decodedToken=jwt_decode(token);console.log(decodedToken);// get current time\nvar currentTime=new Date().getTime()/1000;// compare the expiration time with the current time\n// will return false if expired and will return true if not expired\nconsole.log('exp',decodedToken.exp);return decodedToken.exp>currentTime;};return/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(Route,_objectSpread(_objectSpread({},rest),{},{render:function render(_ref2){var location=_ref2.location;return loggedInUser.email||isLoggedIn()?children:/*#__PURE__*/_jsx(Redirect,{to:{pathname:\"/login\",state:{from:location}}});}}))});};export default PrivateRoute;","map":{"version":3,"sources":["E:/form-client/src/Components/Login/PrivateRoute.js"],"names":["React","useContext","Redirect","Route","UserContext","jwt_decode","PrivateRoute","children","rest","loggedInUser","setLoggedInUser","isLoggedIn","token","sessionStorage","getItem","decodedToken","console","log","currentTime","Date","getTime","exp","location","email","pathname","state","from"],"mappings":"6bAAA,MAAOA,CAAAA,KAAP,EAAgBC,UAAhB,KAAkC,OAAlC,CACA,OAASC,QAAT,CAAmBC,KAAnB,KAAgC,kBAAhC,CACA,OAASC,WAAT,KAA4B,WAA5B,CACA,MAAOC,CAAAA,UAAP,KAAuB,YAAvB,C,2CACA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,MAA2B,IAAxBC,CAAAA,QAAwB,MAAxBA,QAAwB,CAAXC,IAAW,0CAC5C,gBAAwCP,UAAU,CAACG,WAAD,CAAlD,4CAAOK,YAAP,iBAAqBC,eAArB,iBAGI,GAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,EAAM,CACrB,GAAMC,CAAAA,KAAK,CAAGC,cAAc,CAACC,OAAf,CAAuB,OAAvB,CAAd,CACA,GAAG,CAACF,KAAJ,CAAU,CACR,MAAO,MAAP,CACD,CACD,GAAMG,CAAAA,YAAY,CAAGV,UAAU,CAACO,KAAD,CAA/B,CACAI,OAAO,CAACC,GAAR,CAAYF,YAAZ,EACA;AACA,GAAMG,CAAAA,WAAW,CAAG,GAAIC,CAAAA,IAAJ,GAAWC,OAAX,GAAuB,IAA3C,CACA;AACA;AACAJ,OAAO,CAACC,GAAR,CAAY,KAAZ,CAAkBF,YAAY,CAACM,GAA/B,EAEA,MAAON,CAAAA,YAAY,CAACM,GAAb,CAAmBH,WAA1B,CAED,CAfH,CAoBJ,mBACI,kCACI,KAAC,KAAD,gCACQV,IADR,MAEI,MAAM,CAAE,0BAAGc,CAAAA,QAAH,OAAGA,QAAH,OAEJb,CAAAA,YAAY,CAACc,KAAb,EACGZ,UAAU,EAFjB,CAIQJ,QAJR,cAMQ,KAAC,QAAD,EACI,EAAE,CAAE,CACAiB,QAAQ,CAAE,QADV,CAEAC,KAAK,CAAE,CAAEC,IAAI,CAAEJ,QAAR,CAFP,CADR,EAPA,EAFZ,GADJ,EADJ,CAsBH,CA9CD,CAgDA,cAAehB,CAAAA,YAAf","sourcesContent":["import React, { useContext } from 'react';\r\nimport { Redirect, Route } from 'react-router-dom';\r\nimport { UserContext } from '../../App';\r\nimport jwt_decode from \"jwt-decode\";\r\nconst PrivateRoute = ({ children, ...rest }) => {\r\n    const [loggedInUser, setLoggedInUser] = useContext(UserContext)\r\n\r\n   \r\n        const isLoggedIn = () => {\r\n            const token = sessionStorage.getItem('token');\r\n            if(!token){\r\n              return false;\r\n            }\r\n            const decodedToken = jwt_decode(token);\r\n            console.log(decodedToken)\r\n            // get current time\r\n            const currentTime = new Date().getTime() / 1000;\r\n            // compare the expiration time with the current time\r\n            // will return false if expired and will return true if not expired\r\n            console.log('exp',decodedToken.exp)\r\n            \r\n            return decodedToken.exp > currentTime;\r\n            \r\n          }\r\n    \r\n  \r\n\r\n\r\n    return (\r\n        <div>\r\n            <Route\r\n                {...rest}\r\n                render={({ location }) =>\r\n                (\r\n                    loggedInUser.email \r\n                    || isLoggedIn()) \r\n                     ? (\r\n                        children\r\n                    ) : (\r\n                        <Redirect\r\n                            to={{\r\n                                pathname: \"/login\",\r\n                                state: { from: location }\r\n                            }}\r\n                        />\r\n                    )\r\n                }\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PrivateRoute;"]},"metadata":{},"sourceType":"module"}