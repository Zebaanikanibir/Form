{"ast":null,"code":"var _jsxFileName = \"E:\\\\form-client\\\\src\\\\Components\\\\Login\\\\PrivateRoute.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext } from 'react';\nimport { Redirect, Route } from 'react-router-dom';\nimport { UserContext } from '../../App';\nimport jwt_decode from \"jwt-decode\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PrivateRoute = ({\n  children,\n  ...rest\n}) => {\n  _s();\n\n  const [loggedInUser, setLoggedInUser] = useContext(UserContext);\n\n  const isLoggedIn = () => {\n    const token = sessionStorage.getItem('token');\n\n    if (!token) {\n      return false;\n    }\n\n    const decodedToken = jwt_decode(token);\n    console.log(decodedToken); // get current time\n\n    const currentTime = new Date().getTime() / 1000; // compare the expiration time with the current time\n    // will return false if expired and will return true if not expired\n\n    console.log('exp', decodedToken.exp);\n    return decodedToken.exp > currentTime;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Route, { ...rest,\n      render: ({\n        location\n      }) => loggedInUser.email || isLoggedIn() ? children : /*#__PURE__*/_jsxDEV(Redirect, {\n        to: {\n          pathname: \"/login\",\n          state: {\n            from: location\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 9\n  }, this);\n};\n\n_s(PrivateRoute, \"xnZl/o+OAJkkhQWyVMfTn8VXTc8=\");\n\n_c = PrivateRoute;\nexport default PrivateRoute;\n\nvar _c;\n\n$RefreshReg$(_c, \"PrivateRoute\");","map":{"version":3,"sources":["E:/form-client/src/Components/Login/PrivateRoute.js"],"names":["React","useContext","Redirect","Route","UserContext","jwt_decode","PrivateRoute","children","rest","loggedInUser","setLoggedInUser","isLoggedIn","token","sessionStorage","getItem","decodedToken","console","log","currentTime","Date","getTime","exp","location","email","pathname","state","from"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,SAASC,QAAT,EAAmBC,KAAnB,QAAgC,kBAAhC;AACA,SAASC,WAAT,QAA4B,WAA5B;AACA,OAAOC,UAAP,MAAuB,YAAvB;;;AACA,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAY,KAAGC;AAAf,CAAD,KAA2B;AAAA;;AAC5C,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCT,UAAU,CAACG,WAAD,CAAlD;;AAGI,QAAMO,UAAU,GAAG,MAAM;AACrB,UAAMC,KAAK,GAAGC,cAAc,CAACC,OAAf,CAAuB,OAAvB,CAAd;;AACA,QAAG,CAACF,KAAJ,EAAU;AACR,aAAO,KAAP;AACD;;AACD,UAAMG,YAAY,GAAGV,UAAU,CAACO,KAAD,CAA/B;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAYF,YAAZ,EANqB,CAOrB;;AACA,UAAMG,WAAW,GAAG,IAAIC,IAAJ,GAAWC,OAAX,KAAuB,IAA3C,CARqB,CASrB;AACA;;AACAJ,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAkBF,YAAY,CAACM,GAA/B;AAEA,WAAON,YAAY,CAACM,GAAb,GAAmBH,WAA1B;AAED,GAfH;;AAoBJ,sBACI;AAAA,2BACI,QAAC,KAAD,OACQV,IADR;AAEI,MAAA,MAAM,EAAE,CAAC;AAAEc,QAAAA;AAAF,OAAD,KAEJb,YAAY,CAACc,KAAb,IACGZ,UAAU,EAFjB,GAIQJ,QAJR,gBAMQ,QAAC,QAAD;AACI,QAAA,EAAE,EAAE;AACAiB,UAAAA,QAAQ,EAAE,QADV;AAEAC,UAAAA,KAAK,EAAE;AAAEC,YAAAA,IAAI,EAAEJ;AAAR;AAFP;AADR;AAAA;AAAA;AAAA;AAAA;AATZ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAsBH,CA9CD;;GAAMhB,Y;;KAAAA,Y;AAgDN,eAAeA,YAAf","sourcesContent":["import React, { useContext } from 'react';\r\nimport { Redirect, Route } from 'react-router-dom';\r\nimport { UserContext } from '../../App';\r\nimport jwt_decode from \"jwt-decode\";\r\nconst PrivateRoute = ({ children, ...rest }) => {\r\n    const [loggedInUser, setLoggedInUser] = useContext(UserContext)\r\n\r\n   \r\n        const isLoggedIn = () => {\r\n            const token = sessionStorage.getItem('token');\r\n            if(!token){\r\n              return false;\r\n            }\r\n            const decodedToken = jwt_decode(token);\r\n            console.log(decodedToken)\r\n            // get current time\r\n            const currentTime = new Date().getTime() / 1000;\r\n            // compare the expiration time with the current time\r\n            // will return false if expired and will return true if not expired\r\n            console.log('exp',decodedToken.exp)\r\n            \r\n            return decodedToken.exp > currentTime;\r\n            \r\n          }\r\n    \r\n  \r\n\r\n\r\n    return (\r\n        <div>\r\n            <Route\r\n                {...rest}\r\n                render={({ location }) =>\r\n                (\r\n                    loggedInUser.email \r\n                    || isLoggedIn()) \r\n                     ? (\r\n                        children\r\n                    ) : (\r\n                        <Redirect\r\n                            to={{\r\n                                pathname: \"/login\",\r\n                                state: { from: location }\r\n                            }}\r\n                        />\r\n                    )\r\n                }\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PrivateRoute;"]},"metadata":{},"sourceType":"module"}